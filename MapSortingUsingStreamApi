package com.cts.streams;

import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.ToString;

public class MapSortingUsingStreamApi {

	public static void main(String[] args) {
		Map<Integer, Employee> map = new HashMap<>();
		// Map<Integer, String> map = new HashMap<>();
		Employee e1 = new Employee(1, "ram");
		Employee e2 = new Employee(4, "shyam");
		Employee e3 = new Employee(3, "bala");
		Employee e4 = new Employee(1, "aa");
		map.put(130, e1);
		map.put(160, e2);
		map.put(110, e3);
		map.put(190, e4);
		map.forEach((k, v) -> System.out.println(k + " " + v));
		Map<Integer, Employee> collect = map.entrySet().stream().sorted(Map.Entry.comparingByKey())
				.collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (k, v) -> k, LinkedHashMap::new));
		System.out.println("-------------------------sort by key--------------------------------------");
		collect.forEach((k, v) -> System.out.println(k + " " + v));

		Map<Integer, Employee> sorted = map.entrySet().stream()
				.sorted((o1, o2) -> Integer.compare(o1.getValue().getId(), o2.getValue().getId()))
				.collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (k, v) -> k, LinkedHashMap::new));
		System.out.println("----------------------------sort by value using id-----------------------------------");
		sorted.forEach((k, v) -> System.out.println(k + " " + v));

		Map<Integer, Employee> sorted1 = map.entrySet().stream()
				.sorted((o1, o2) -> o1.getValue().getName().compareTo(o2.getValue().getName()))
				.collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (k, v) -> k, LinkedHashMap::new));
		System.out.println("----------------------------sort by value using name-----------------------------------");
		sorted1.forEach((k, v) -> System.out.println(k + " " + v));

		LinkedHashMap<Integer, Employee> collect2 = map.entrySet().stream()
				.sorted(new Comparator<Entry<Integer, Employee>>() {
					public int compare(Entry<Integer, Employee> e1, Entry<Integer, Employee> e2) {
						return Integer.compare(e1.getValue().getId(), e2.getValue().getId());
					}
				}.thenComparing((u1, u2) -> u1.getValue().getName().compareTo(u2.getValue().getName())))
				.collect(Collectors.toMap(Entry::getKey, Map.Entry::getValue, (e5, e6) -> e1, LinkedHashMap::new));
		System.out.println("----------------------------sort by value using id and name-----------------------------------");
		collect2.forEach((k, v) -> System.out.println(k + " " + v));
		//---------------------------------------------------------------------------------------------------------------------------------------
				Comparator<Employee> comName = (o1, o2) -> o1.getName().compareTo(o2.getName());
		Comparator<Employee> comId = (o1, o2) -> Integer.compare(o1.getId(), o2.getId());
		Comparator<Employee> comIdName = new Comparator<Employee>() {
			public int compare(Employee o1, Employee o2) {
				return Integer.compare(o1.getId(), o2.getId());
			}
		}.thenComparing(Comparator.comparing(e -> e.getName()));

		Comparator<Employee> comIdName1 = Comparator.comparing(Employee::getId).thenComparing(Comparator.comparing(e -> e.getName()));
		Comparator<Employee> comIdName10 = Comparator.comparing(Employee::getId)
		                                             .thenComparing(Comparator.comparing(Employee::getName)
				                             .thenComparing(e ->e.getId()));  // to call next property first change lambda to method reference
		Comparator<Employee> comIdName2 = Comparator.comparing(Employee::getId);
		Comparator<Employee> comIdName11 = Comparator.comparing(e -> e.getId());
		
		map.forEach((k, v) -> System.out.println(k + " " + v));
		Map<Integer, Employee> collect = map.entrySet().stream()
				.sorted(Map.Entry.<Integer, Employee>comparingByValue(comId.thenComparing(comName)))
				.collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (k, v) -> k, LinkedHashMap::new));
		System.out.println(
				"-------------------------sort by values using id and name--------------------------------------");
		collect.forEach((k, v) -> System.out.println(k + " " + v));
		
		Map<Integer, Employee> collect4 = map.entrySet().stream()
				.sorted(Map.Entry.<Integer, Employee>comparingByValue(comIdName10))
				.collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (k, v) -> k, LinkedHashMap::new));
		System.out.println(
				"-------------------------sort by values using id and name--------------------------------------");
		collect.forEach((k, v) -> System.out.println(k + " " + v));
		
		
		Map<Integer, Employee> collect1 = map.entrySet().stream()
				.sorted(Map.Entry.<Integer, Employee>comparingByValue(Comparator.comparing(Employee::getId).thenComparing(Comparator.comparing(e -> e.getName()))))
				.collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (k, v) -> k, LinkedHashMap::new));
		System.out.println(
				"-------------------------sort by values using id and name--------------------------------------");
		collect1.forEach((k, v) -> System.out.println(k + " " + v));
	}
}

//@Data
@AllArgsConstructor
@Getter
@ToString
class Employee {
	private int id;
	private String name;
}
