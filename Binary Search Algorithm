BINARY SEARCH or HALF-INTRVAL SEARCH or LOGARITHMIC SEARCH OR BINARY CHOP
First Prerequisite  : Array must be short.
We will apply Divide and conquer rule. O(log n)
// First Prerequisite  : Array must be short.
// We will apply Divide and conquer rule. 

// Time Complixety in Worst-case performance of Linear Search   : O(log n)
// Time Complixety in Average performance of Linear Search      : 0(log n)
// Time Complixety in Best-case performance of Linear Search    : O(1)
// Worst-case space complexity   : 

import java.util.*;
public class BinarySearch
{
	public static void main(String[] args) {
		System.out.println("Hello World");
		int [] a = {1,2,3,4,5,6,7,8,9};
		System.out.println(Arrays.toString(a));
		//System.out.println(iterativeImplBinarySearch(a,8));
		System.out.println(recursiveImplBinarySearch(a,0,a.length-1,9));
		
	}
	// Recursive implementation of Binary Search 
	public static int recursiveImplBinarySearch(int[] a, int lb, int ub, int data){
	   if( ub >= lb){
	    int mid = (lb + ub) / 2;
	    if(data == a[mid])
	       return mid;
	   else if(data > a[mid])
	       return recursiveImplBinarySearch(a, mid+1, ub, data);
	   else
	       return recursiveImplBinarySearch(a, lb, mid-1, data);
	   }
	    return -1;   
	}
	
	// Iterative implementation of Binary Search
	public static int iterativeImplBinarySearch(int[] a, int data){
	     int lowerBond=0,upperBond = a.length-1,mid = 0;
	     while(lowerBond <= upperBond){
	         mid = (lowerBond + upperBond) / 2;
	         if(data == a[mid])
	             return mid;
	         else if(data > a[mid])
	             lowerBond = mid + 1;
	         else 
	            upperBond = mid - 1;
	     }
	   return -1;
	}
}

	
	public static int[] bubboleSort(int[] arr){
	    int length = arr.length, temp = 0;
	    boolean flag = true;
	    for(int i = 0; i < length-1-i; i++){
	        //System.out.println("----"+Arrays.toString(arr));
	        for(int j = 0; j < length-1; j++){
	            if(arr[j] > arr[j+1]){
	                temp = arr[j];
	                arr[j] = arr[j+1];
	                arr[j+1] = temp;
	                flag = false;
	            }
	        }
	        if(flag)
	          break;
	    }
	    return arr;
	}
}	
	public static int[] selectionSort(int []  arr){
	    int temp = 0, min = 0;
	    for(int i = 0; i < arr.length - 1; i++){
	        min = i;
	        for(int j = i+1; j < arr.length; j++){
	            if(arr[min] > arr[j])
	               min = j;
	        }
	        if(min != i){
	            temp = arr[i];
	            arr[i] = arr[min];
	            arr[min] = temp;
	        }
	        //System.out.println(Arrays.toString(arr));
	    }
	    return arr;
	}


